[
  {
    "Id": "215895",
    "ThreadId": "63486",
    "Html": "<p>Would it possibly be a good idea to add object sender information to the Messenger? IE  on Register and Notify the user of the messenger would have to identify itself via some sort of unique id. This way if you have a two ViewModels that are listening and changing the same data you will not end up in a circular infinite recursion.</p>\r\n<p>I came across this thought because I have some ViewModels that need to update Messages, but they are also listening to the same ones. Is there anything already preventing this case?</p>\r\n<p>I think at a basic level on register all you would need is the Registered objects unique name and maybe its Type. Inside of the Messenger class on the NotifyColleagues the DynamicInvoke on the action would occur for everyone but the sender.</p>\r\n<p>Hope I am not totally off base.</p>\r\n<p>&nbsp;</p>\r\n<p>Nick</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-24T16:27:48.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216512",
    "ThreadId": "63486",
    "Html": "<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n\r\n<span style=\"color:Blue\">namespace</span> MvvmFoundation.Wpf\r\n{\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Nick McCready (NEM)</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Extending Josh Smith's Messenger to help try and prevent infinite recursion for VieModels that listen and Update the same data</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> SourceMessenger\r\n    </span>{\r\n        <span style=\"color:Green\">//public void NotifyColleagues(string message);</span>\r\n        <span style=\"color:Green\">//public void NotifyColleagues(string message, object parameter);</span>\r\n        <span style=\"color:Green\">//public void Register(string message, Delegate callback);</span>\r\n\r\n        Dictionary&lt;<span style=\"color:Blue\">string</span>, Type&gt; _registeredSenders = <span style=\"color:Blue\">new</span> Dictionary&lt;<span style=\"color:Blue\">string</span>, Type&gt;();\r\n        Messenger _messenger;\r\n\r\n        <span style=\"color:Blue\">public</span> SourceMessenger()\r\n        {\r\n            _messenger = <span style=\"color:Blue\">new</span> Messenger();\r\n        }\r\n\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> NotifyColleagues(MessengerSender sender, <span style=\"color:Blue\">string</span> message)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (!_registeredSenders.ContainsKey(sender.Name))\r\n                <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender is not registered&quot;</span>));\r\n            <span style=\"color:Blue\">if</span> (_registeredSenders[sender.Name] != sender.SenderType)\r\n                <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender Type MisMatch&quot;</span>));\r\n            _messenger.NotifyColleagues(message, <span style=\"color:Blue\">new</span> MessagePayload(sender, <span style=\"color:Blue\">null</span>));\r\n        }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> NotifyColleagues(MessengerSender sender, <span style=\"color:Blue\">string</span> message, <span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (!_registeredSenders.ContainsKey(sender.Name))\r\n                <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender is not registered&quot;</span>));\r\n            <span style=\"color:Blue\">if</span> (_registeredSenders[sender.Name] != sender.SenderType)\r\n                <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender Type MisMatch&quot;</span>));\r\n            _messenger.NotifyColleagues(message, <span style=\"color:Blue\">new</span> MessagePayload(sender, parameter));\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> RegisterSender(MessengerSender sender)\r\n        {\r\n            <span style=\"color:Blue\">try</span>\r\n            {\r\n                _registeredSenders.Add(sender.Name, sender.SenderType);\r\n            }\r\n            <span style=\"color:Blue\">catch</span>\r\n            {\r\n                <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;InvalidUnique Name on Sender&quot;</span>));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Registers the specified sender. At Least this way the user can check who sent it</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;sender&quot;&gt;</span><span style=\"color:Green\">The sender.&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;message&quot;&gt;</span><span style=\"color:Green\">The message.&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;callback&quot;&gt;</span><span style=\"color:Green\">The callback.&lt;/param&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> RegisterMessage(MessengerSender sender, <span style=\"color:Blue\">string</span> message, Action&lt;MessagePayload&gt; callback)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (!_registeredSenders.ContainsKey(sender.Name))\r\n                <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender is not registered&quot;</span>));\r\n            <span style=\"color:Blue\">if</span> (_registeredSenders[sender.Name] != sender.SenderType)\r\n                <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender Type MisMatch&quot;</span>));\r\n            _messenger.Register(message, callback);\r\n        }\r\n\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MessengerSender\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> Type SenderType { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> Name { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n        <span style=\"color:Blue\">public</span> MessengerSender(<span style=\"color:Blue\">string</span> name, Type type)\r\n        {\r\n            SenderType = type;\r\n            Name = name;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">bool</span> Equals(<span style=\"color:Blue\">object</span> obj)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (obj <span style=\"color:Blue\">is</span> MessengerSender)\r\n            {\r\n                MessengerSender sender = (MessengerSender)obj;\r\n                <span style=\"color:Blue\">if</span> (sender.Name == <span style=\"color:Blue\">this</span>.Name &amp;&amp; sender.SenderType == <span style=\"color:Blue\">this</span>.SenderType)\r\n                    <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>;\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n            }\r\n            <span style=\"color:Blue\">else</span>\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n        }\r\n\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MessagePayload\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">object</span> Parameter { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n        <span style=\"color:Blue\">public</span> MessengerSender Sender { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n        <span style=\"color:Blue\">public</span> MessagePayload(MessengerSender sender, <span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            Sender = sender;\r\n            Parameter = parameter;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>Here is the code I wrote as a wrapper around Messenger. I have a full working example I would like to upload for anyone to look at. All I did was use the existing example.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">using System;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">using System.Collections.Generic;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">using System.Linq;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">using System.Text;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">namespace MvvmFoundation.Wpf</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;/// &lt;summary&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;/// Nick McCready (NEM)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;/// Extending Josh Smith's Messenger to help try and prevent infinite recursion for VieModels that listen and Update the same data</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;/// &lt;/summary&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;public class SourceMessenger</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;//public void NotifyColleagues(string message);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;//public void NotifyColleagues(string message, object parameter);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;//public void Register(string message, Delegate callback);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;Dictionary&lt;string, Type&gt; _registeredSenders = new Dictionary&lt;string, Type&gt;();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;Messenger _messenger;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public SourceMessenger()</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_messenger = new Messenger();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public void NotifyColleagues(MessengerSender sender, string message)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (!_registeredSenders.ContainsKey(sender.Name))</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw (new Exception(&quot;Sender is not registered&quot;));</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (_registeredSenders[sender.Name] != sender.SenderType)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw (new Exception(&quot;Sender Type MisMatch&quot;));</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_messenger.NotifyColleagues(message, new MessagePayload(sender, null));</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public void NotifyColleagues(MessengerSender sender, string message, object parameter)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (!_registeredSenders.ContainsKey(sender.Name))</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw (new Exception(&quot;Sender is not registered&quot;));</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (_registeredSenders[sender.Name] != sender.SenderType)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw (new Exception(&quot;Sender Type MisMatch&quot;));</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_messenger.NotifyColleagues(message, new MessagePayload(sender, parameter));</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public void RegisterSender(MessengerSender sender)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;try</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_registeredSenders.Add(sender.Name, sender.SenderType);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;catch</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw (new Exception(&quot;InvalidUnique Name on Sender&quot;));</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/// &lt;summary&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/// Registers the specified sender. At Least this way the user can check who sent it</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/// &lt;/summary&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/// &lt;param name=&quot;sender&quot;&gt;The sender.&lt;/param&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/// &lt;param name=&quot;message&quot;&gt;The message.&lt;/param&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/// &lt;param name=&quot;callback&quot;&gt;The callback.&lt;/param&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public void RegisterMessage(MessengerSender sender, string message, Action&lt;MessagePayload&gt; callback)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (!_registeredSenders.ContainsKey(sender.Name))</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw (new Exception(&quot;Sender is not registered&quot;));</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (_registeredSenders[sender.Name] != sender.SenderType)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw (new Exception(&quot;Sender Type MisMatch&quot;));</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_messenger.Register(message, callback);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;public class MessengerSender</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public Type SenderType { get; set; }</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public string Name { get; set; }</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public MessengerSender(string name, Type type)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SenderType = type;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Name = name;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public override bool Equals(object obj)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (obj is MessengerSender)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MessengerSender sender = (MessengerSender)obj;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (sender.Name == this.Name &amp;&amp; sender.SenderType == this.SenderType)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return true;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return false;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return false;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;public class MessagePayload</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public object Parameter { get; set; }</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public MessengerSender Sender { get; set; }</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public MessagePayload(MessengerSender sender, object parameter)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Sender = sender;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Parameter = parameter;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">}</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-27T12:10:13.187-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216519",
    "ThreadId": "63486",
    "Html": "<p>This probably should be updated with weak references like the original, but this was a start.</p>",
    "PostedDate": "2009-07-27T12:35:42.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216559",
    "ThreadId": "63486",
    "Html": "<p>That's an interesting idea, thanks for sharing it. &nbsp;I am not going to add it to MVVM Foundation because I think that it adds complexity to Messenger that is only in place to avoid an edge case, which could be avoided by the type's client code. &nbsp;Thanks for sharing your ideas!</p>",
    "PostedDate": "2009-07-27T14:58:30.74-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216594",
    "ThreadId": "63486",
    "Html": "<p>Actually, I really meant for this class not to be used. I just wanted to use it as an example of the issue. This is why I would like to send you the &nbsp;Demo updated with this. What I will probably do is integrate the source and payload stuff directly into Messenger so that &nbsp;it skips the delegate invocation for the the person that called the NotifyColleagues method.</p>",
    "PostedDate": "2009-07-27T17:16:45.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216934",
    "ThreadId": "63486",
    "Html": "<p>Here is another way where the Messenger makes thge decision not to invoke delegates by the Notifying sender.</p>\r\n<p>&nbsp;</p>\r\n<p>I had a bug.. fixed it. was in GetActions()</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> System.Reflection;\r\n\r\n<span style=\"color:Blue\">namespace</span> MvvmFoundation.Wpf\r\n{\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Nick McCready (NEM)</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Extending Josh Smith's Messenger to help try and prevent infinite recursion for VieModels that listen and Update the same data</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> SourceMessenger\r\n    </span>{\r\n\r\n        Dictionary&lt;<span style=\"color:Blue\">string</span>, Type&gt; _registeredSenders = <span style=\"color:Blue\">new</span> Dictionary&lt;<span style=\"color:Blue\">string</span>, Type&gt;();\r\n\r\n        <span style=\"color:Blue\">public</span> SourceMessenger()\r\n        {\r\n        }\r\n\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> NotifyColleagues(MessengerSender sender, <span style=\"color:Blue\">string</span> message)\r\n        {\r\n            <span style=\"color:Blue\">lock</span> (_registeredSenders)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (!_registeredSenders.ContainsKey(sender.Name))\r\n                    <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender is not registered&quot;</span>));\r\n                <span style=\"color:Blue\">if</span> (_registeredSenders[sender.Name] != sender.SenderType)\r\n                    <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender Type MisMatch&quot;</span>));\r\n            }\r\n            <span style=\"color:Blue\">this</span>.OldNotifyColleagues(sender, message);\r\n\r\n        }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> NotifyColleagues(MessengerSender sender, <span style=\"color:Blue\">string</span> message, <span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            <span style=\"color:Blue\">lock</span> (_registeredSenders)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (!_registeredSenders.ContainsKey(sender.Name))\r\n                    <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender is not registered&quot;</span>));\r\n                <span style=\"color:Blue\">if</span> (_registeredSenders[sender.Name] != sender.SenderType)\r\n                    <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender Type MisMatch&quot;</span>));\r\n            }\r\n            <span style=\"color:Blue\">this</span>.OldNotifyColleagues(sender, message, parameter);\r\n        }\r\n        <span style=\"color:Blue\">#region</span> Register\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> RegisterSender(MessengerSender sender)\r\n        {\r\n            <span style=\"color:Blue\">try</span>\r\n            {\r\n                <span style=\"color:Blue\">lock</span> (_registeredSenders)\r\n                    _registeredSenders.Add(sender.Name, sender.SenderType);\r\n            }\r\n            <span style=\"color:Blue\">catch</span>\r\n            {\r\n                <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;InvalidUnique Name on Sender&quot;</span>));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> DeRegisterSender(MessengerSender sender)\r\n        {\r\n            <span style=\"color:Blue\">lock</span> (_registeredSenders)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (_registeredSenders.ContainsKey(sender.Name))\r\n                {\r\n                    <span style=\"color:Green\">//verify the type</span>\r\n                    <span style=\"color:Blue\">if</span> (_registeredSenders[sender.Name] == sender.SenderType)\r\n                        _registeredSenders.Remove(sender.Name);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Registers the specified sender. At Least this way the user can check who sent it</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;sender&quot;&gt;</span><span style=\"color:Green\">The sender.&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;message&quot;&gt;</span><span style=\"color:Green\">The message.&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;callback&quot;&gt;</span><span style=\"color:Green\">The callback.&lt;/param&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> RegisterMessage(MessengerSender sender, <span style=\"color:Blue\">string</span> message, Delegate callback)\r\n        {\r\n            <span style=\"color:Blue\">lock</span> (_registeredSenders)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (!_registeredSenders.ContainsKey(sender.Name))\r\n                    <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender is not registered&quot;</span>));\r\n                <span style=\"color:Blue\">if</span> (_registeredSenders[sender.Name] != sender.SenderType)\r\n                    <span style=\"color:Blue\">throw</span> (<span style=\"color:Blue\">new</span> Exception(<span style=\"color:#A31515\">&quot;Sender Type MisMatch&quot;</span>));\r\n            }\r\n            Register(sender, message, callback);\r\n\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Registers a callback method to be invoked when a specific message is broadcasted.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;message&quot;&gt;</span><span style=\"color:Green\">The message to register for.&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;callback&quot;&gt;</span><span style=\"color:Green\">The callback to be called when this message is broadcasted.&lt;/param&gt;</span>\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">void</span> Register(MessengerSender sender, <span style=\"color:Blue\">string</span> message, Delegate callback)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (String.IsNullOrEmpty(message))\r\n                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentException(<span style=\"color:#A31515\">&quot;'message' cannot be null or empty.&quot;</span>);\r\n\r\n            <span style=\"color:Blue\">if</span> (callback == <span style=\"color:Blue\">null</span>)\r\n                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(<span style=\"color:#A31515\">&quot;callback&quot;</span>);\r\n\r\n            ParameterInfo[] parameters = callback.Method.GetParameters();\r\n            <span style=\"color:Blue\">if</span> (parameters != <span style=\"color:Blue\">null</span> &amp;&amp; parameters.Length &gt; 1)\r\n                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> InvalidOperationException(<span style=\"color:#A31515\">&quot;The registered delegate can have no more than one parameter.&quot;</span>);\r\n\r\n            Type parameterType = (parameters == <span style=\"color:Blue\">null</span> || parameters.Length == 0) ? <span style=\"color:Blue\">null</span> : parameters[0].ParameterType;\r\n\r\n            _messageToActionsMap.AddAction(sender, message, callback.Target, callback.Method, parameterType);\r\n        }\r\n\r\n        <span style=\"color:Blue\">#endregion</span> // Register\r\n\r\n        <span style=\"color:Blue\">#region</span> NotifyColleagues\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Notifies all registered parties that a message is being broadcasted.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;message&quot;&gt;</span><span style=\"color:Green\">The message to broadcast&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;parameter&quot;&gt;</span><span style=\"color:Green\">The parameter to pass together with the message&lt;/param&gt;</span>\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">void</span> OldNotifyColleagues(MessengerSender sender, <span style=\"color:Blue\">string</span> message, <span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (String.IsNullOrEmpty(message))\r\n                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentException(<span style=\"color:#A31515\">&quot;'message' cannot be null or empty.&quot;</span>);\r\n\r\n            <span style=\"color:Blue\">var</span> actions = _messageToActionsMap.GetActions(sender, message);\r\n            <span style=\"color:Blue\">if</span> (actions != <span style=\"color:Blue\">null</span>)\r\n                actions.ForEach(action =&gt; action.DynamicInvoke(parameter));\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Notifies all registered parties that a message is being broadcasted.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;message&quot;&gt;</span><span style=\"color:Green\">The message to broadcast.&lt;/param&gt;</span>\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">void</span> OldNotifyColleagues(MessengerSender sender, <span style=\"color:Blue\">string</span> message)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (String.IsNullOrEmpty(message))\r\n                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentException(<span style=\"color:#A31515\">&quot;'message' cannot be null or empty.&quot;</span>);\r\n\r\n            <span style=\"color:Blue\">var</span> actions = _messageToActionsMap.GetActions(sender, message);\r\n            <span style=\"color:Blue\">if</span> (actions != <span style=\"color:Blue\">null</span>)\r\n                actions.ForEach(action =&gt; action.DynamicInvoke());\r\n        }\r\n\r\n        <span style=\"color:Blue\">#endregion</span> // NotifyColleauges\r\n\r\n        <span style=\"color:Blue\">#region</span> MessageToActionsMap [nested class]\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> This class is an implementation detail of the Messenger class.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MessageToActionsMap\r\n        </span>{\r\n            <span style=\"color:Blue\">#region</span> Constructor\r\n\r\n            <span style=\"color:Blue\">internal</span> MessageToActionsMap()\r\n            {\r\n            }\r\n\r\n            <span style=\"color:Blue\">#endregion</span> // Constructor\r\n\r\n            <span style=\"color:Blue\">#region</span> AddAction\r\n\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Adds an action to the list.</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;message&quot;&gt;</span><span style=\"color:Green\">The message to register.&lt;/param&gt;</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;target&quot;&gt;</span><span style=\"color:Green\">The target object to invoke, or null.&lt;/param&gt;</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;method&quot;&gt;</span><span style=\"color:Green\">The method to invoke.&lt;/param&gt;</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;actionType&quot;&gt;</span><span style=\"color:Green\">The type of the Action delegate.&lt;/param&gt;</span>\r\n            <span style=\"color:Blue\">internal</span> <span style=\"color:Blue\">void</span> AddAction(MessengerSender sender, <span style=\"color:Blue\">string</span> message, <span style=\"color:Blue\">object</span> target, MethodInfo method, Type actionType)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (message == <span style=\"color:Blue\">null</span>)\r\n                    <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(<span style=\"color:#A31515\">&quot;message&quot;</span>);\r\n\r\n                <span style=\"color:Blue\">if</span> (method == <span style=\"color:Blue\">null</span>)\r\n                    <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(<span style=\"color:#A31515\">&quot;method&quot;</span>);\r\n\r\n                <span style=\"color:Blue\">lock</span> (_map)\r\n                {\r\n                    <span style=\"color:Blue\">if</span> (!_map.ContainsKey(message))\r\n                        _map[message] = <span style=\"color:Blue\">new</span> List&lt;WeakAction&gt;();\r\n\r\n                    _map[message].Add(<span style=\"color:Blue\">new</span> WeakAction(sender, target, method, actionType));\r\n                }\r\n            }\r\n\r\n            <span style=\"color:Blue\">#endregion</span> // AddAction\r\n\r\n            <span style=\"color:Blue\">#region</span> GetActions\r\n\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets the list of actions to be invoked for the specified message</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;message&quot;&gt;</span><span style=\"color:Green\">The message to get the actions for&lt;/param&gt;</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span><span style=\"color:Green\">Returns a list of actions that are registered to the specified message&lt;/returns&gt;</span>\r\n            <span style=\"color:Blue\">internal</span> List&lt;Delegate&gt; GetActions(MessengerSender sender, <span style=\"color:Blue\">string</span> message)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (message == <span style=\"color:Blue\">null</span>)\r\n                    <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(<span style=\"color:#A31515\">&quot;message&quot;</span>);\r\n\r\n                List&lt;Delegate&gt; actions;\r\n                <span style=\"color:Blue\">lock</span> (_map)\r\n                {\r\n                    <span style=\"color:Blue\">if</span> (!_map.ContainsKey(message))\r\n                        <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n\r\n                    List&lt;WeakAction&gt; weakActions = _map[message];\r\n                    actions = <span style=\"color:Blue\">new</span> List&lt;Delegate&gt;(weakActions.Count);\r\n                    <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = weakActions.Count - 1; i &gt; -1; --i)\r\n                    {\r\n                        WeakAction weakAction = weakActions[i];\r\n                        <span style=\"color:Blue\">if</span> (weakAction == <span style=\"color:Blue\">null</span>)\r\n                            <span style=\"color:Blue\">continue</span>;\r\n\r\n                        Delegate action = weakAction.CreateAction();\r\n                        <span style=\"color:Blue\">if</span> (action != <span style=\"color:Blue\">null</span> &amp;&amp; !sender.Equals(weakAction.Sender.Target))\r\n                        {\r\n                            actions.Add(action);\r\n                        }\r\n                        <span style=\"color:Blue\">else</span>\r\n                        {\r\n                            <span style=\"color:Blue\">if</span> (action == <span style=\"color:Blue\">null</span>)\r\n                            {\r\n                                <span style=\"color:Green\">// The target object is dead, so get rid of the weak action.</span>\r\n                                weakActions.Remove(weakAction);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    <span style=\"color:Green\">// Delete the list from the map if it is now empty.</span>\r\n                    <span style=\"color:Blue\">if</span> (weakActions.Count == 0)\r\n                        _map.Remove(message);\r\n                }\r\n\r\n                <span style=\"color:Blue\">return</span> actions;\r\n            }\r\n\r\n            <span style=\"color:Blue\">#endregion</span> // GetActions\r\n\r\n            <span style=\"color:Blue\">#region</span> Fields\r\n\r\n            <span style=\"color:Green\">// Stores a hash where the key is the message and the value is the list of callbacks to invoke.</span>\r\n            <span style=\"color:Blue\">readonly</span> Dictionary&lt;<span style=\"color:Blue\">string</span>, List&lt;WeakAction&gt;&gt; _map = <span style=\"color:Blue\">new</span> Dictionary&lt;<span style=\"color:Blue\">string</span>, List&lt;WeakAction&gt;&gt;();\r\n\r\n            <span style=\"color:Blue\">#endregion</span> // Fields\r\n        }\r\n\r\n        <span style=\"color:Blue\">#endregion</span> // MessageToActionsMap [nested class]\r\n\r\n        <span style=\"color:Blue\">#region</span> WeakAction [nested class]\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> This class is an implementation detail of the MessageToActionsMap class.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> WeakAction\r\n        </span>{\r\n            <span style=\"color:Blue\">#region</span> Constructor\r\n\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Constructs a WeakAction.</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;target&quot;&gt;</span><span style=\"color:Green\">The object on which the target method is invoked, or null if the method is static.&lt;/param&gt;</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;method&quot;&gt;</span><span style=\"color:Green\">The MethodInfo used to create the Action.&lt;/param&gt;</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;parameterType&quot;&gt;</span><span style=\"color:Green\">The type of parameter to be passed to the action. Pass null if there is no parameter.&lt;/param&gt;</span>\r\n            <span style=\"color:Blue\">internal</span> WeakAction(<span style=\"color:Blue\">object</span> sender, <span style=\"color:Blue\">object</span> target, MethodInfo method, Type parameterType)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (sender == <span style=\"color:Blue\">null</span>)\r\n                    _sender = <span style=\"color:Blue\">null</span>;\r\n                <span style=\"color:Blue\">else</span>\r\n                    _sender = <span style=\"color:Blue\">new</span> WeakReference(sender);\r\n\r\n                <span style=\"color:Blue\">if</span> (target == <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    _targetRef = <span style=\"color:Blue\">null</span>;\r\n                }\r\n                <span style=\"color:Blue\">else</span>\r\n                {\r\n                    _targetRef = <span style=\"color:Blue\">new</span> WeakReference(target);\r\n                }\r\n\r\n                _method = method;\r\n\r\n                <span style=\"color:Blue\">if</span> (parameterType == <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    _delegateType = <span style=\"color:Blue\">typeof</span>(Action);\r\n                }\r\n                <span style=\"color:Blue\">else</span>\r\n                {\r\n                    _delegateType = <span style=\"color:Blue\">typeof</span>(Action&lt;&gt;).MakeGenericType(parameterType);\r\n                }\r\n            }\r\n\r\n            <span style=\"color:Blue\">#endregion</span> // Constructor\r\n\r\n            <span style=\"color:Blue\">#region</span> CreateAction\r\n\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Creates a &quot;throw away&quot; delegate to invoke the method on the target, or null if the target object is dead.</span>\r\n            <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:Blue\">internal</span> Delegate CreateAction()\r\n            {\r\n                <span style=\"color:Green\">// Rehydrate into a real Action object, so that the method can be invoked.</span>\r\n                <span style=\"color:Blue\">if</span> (_targetRef == <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    <span style=\"color:Blue\">return</span> Delegate.CreateDelegate(_delegateType, _method);\r\n                }\r\n                <span style=\"color:Blue\">else</span>\r\n                {\r\n                    <span style=\"color:Blue\">try</span>\r\n                    {\r\n                        <span style=\"color:Blue\">object</span> target = _targetRef.Target;\r\n                        <span style=\"color:Blue\">if</span> (target != <span style=\"color:Blue\">null</span>)\r\n                            <span style=\"color:Blue\">return</span> Delegate.CreateDelegate(_delegateType, target, _method);\r\n                    }\r\n                    <span style=\"color:Blue\">catch</span>\r\n                    {\r\n                    }\r\n                }\r\n\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n            }\r\n\r\n            <span style=\"color:Blue\">#endregion</span> // CreateAction\r\n\r\n            <span style=\"color:Blue\">#region</span> Fields\r\n\r\n            <span style=\"color:Blue\">readonly</span> Type _delegateType;\r\n            <span style=\"color:Blue\">readonly</span> MethodInfo _method;\r\n            <span style=\"color:Blue\">readonly</span> WeakReference _targetRef;\r\n            <span style=\"color:Blue\">readonly</span> WeakReference _sender;\r\n\r\n            <span style=\"color:Blue\">public</span> WeakReference Sender\r\n            {\r\n                <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _sender; }\r\n            }\r\n\r\n            <span style=\"color:Blue\">#endregion</span> // Fields\r\n        }\r\n\r\n        <span style=\"color:Blue\">#endregion</span> // WeakAction [nested class]\r\n\r\n        <span style=\"color:Blue\">#region</span> Fields\r\n\r\n        <span style=\"color:Blue\">readonly</span> MessageToActionsMap _messageToActionsMap = <span style=\"color:Blue\">new</span> MessageToActionsMap();\r\n\r\n        <span style=\"color:Blue\">#endregion</span> // Fields\r\n\r\n    }\r\n\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Simple Class used to identify the source of a Message</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MessengerSender\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> Type SenderType { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> Name { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n        <span style=\"color:Blue\">public</span> MessengerSender(<span style=\"color:Blue\">string</span> name, Type type)\r\n        {\r\n            SenderType = type;\r\n            Name = name;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">bool</span> Equals(<span style=\"color:Blue\">object</span> obj)\r\n        {\r\n            <span style=\"color:Green\">// If parameter is null return false.</span>\r\n            <span style=\"color:Blue\">if</span> (obj == <span style=\"color:Blue\">null</span>)\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n\r\n            MessengerSender sender = obj <span style=\"color:Blue\">as</span> MessengerSender;\r\n            <span style=\"color:Blue\">if</span> ((System.Object)sender == <span style=\"color:Blue\">null</span>)\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n            <span style=\"color:Blue\">else</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> (sender.Name == <span style=\"color:Blue\">this</span>.Name) &amp;&amp; (sender.SenderType == <span style=\"color:Blue\">this</span>.SenderType);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">bool</span> Equals(MessengerSender sender)\r\n        {\r\n            <span style=\"color:Blue\">if</span> ((<span style=\"color:Blue\">object</span>)sender == <span style=\"color:Blue\">null</span>)\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n\r\n            <span style=\"color:Blue\">return</span> (sender.Name == <span style=\"color:Blue\">this</span>.Name) &amp;&amp; (sender.SenderType == <span style=\"color:Blue\">this</span>.SenderType);\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"white-space:normal\"><span style=\"color:#0000ff\"><span style=\"white-space:pre\"><br></span></span></span></pre>\r\n</div>",
    "PostedDate": "2009-07-28T12:33:22.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]