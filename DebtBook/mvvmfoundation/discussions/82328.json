[
  {
    "Id": "282883",
    "ThreadId": "82328",
    "Html": "<p>The data object for my application has several editable properties, and several editable child objects.&nbsp; I have a form at the top with all the fields that are directly on the object, and then I have a tab control below that, and each tab is bound to a logical child object.</p>\r\n<p>Whenever the user changes the main object, I only want the displayed tab to update.&nbsp; Then the other tabs will update as the user selects them.&nbsp; This reduces the time required to navigate through the objects using next/prev buttons.</p>\r\n<p>I'm accomplishing this using your property observer class.&nbsp; Each tab's viewmodel registers a listener on the main object property of the main viewmodel.&nbsp; When it changes, the tab's viewmodel fetches its data.&nbsp; To keep the other &quot;nondisplayed&quot; tabs from also fetching data, I added an UnregisterHandler method to the property observer. Then a tab is clicked, the deselected tab calls unregister handler so that it is no longer listening for main object updates.</p>\r\n<p>Here is the code:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> PropertyObserver&lt;TPropertySource&gt; UnregisterHandler(Expression&lt;Func&lt;TPropertySource, <span style=\"color:Blue\">object</span>&gt;&gt; expression)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (expression == <span style=\"color:Blue\">null</span>)\r\n                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(<span style=\"color:#A31515\">&quot;expression&quot;</span>);\r\n\r\n            <span style=\"color:Blue\">string</span> propertyName = GetPropertyName(expression);\r\n            <span style=\"color:Blue\">if</span> (String.IsNullOrEmpty(propertyName))\r\n                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentException(<span style=\"color:#A31515\">&quot;'expression' did not provide a property name.&quot;</span>);\r\n\r\n             TPropertySource propertySource = <span style=\"color:Blue\">this</span>.GetPropertySource();\r\n             <span style=\"color:Blue\">if</span> (propertySource != <span style=\"color:Blue\">null</span>)\r\n             {\r\n                 <span style=\"color:Blue\">if</span> (_propertyNameToHandlerMap.ContainsKey(propertyName))\r\n                 {\r\n                     _propertyNameToHandlerMap.Remove(propertyName);\r\n                     PropertyChangedEventManager.RemoveListener(propertySource, <span style=\"color:Blue\">this</span>, propertyName);\r\n                 }\r\n             }\r\n\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">this</span>;\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>It's a copy of the register handler method with a few key changes.&nbsp;</p>\r\n<p>The problem I found is that the ReceiveWeakEvent method still fires.&nbsp; When it gets to the Map.TryGetValue<strong> </strong>part, it evaluates to false because the handler has been removed from the map.&nbsp; Then I get a vague runtime exception.</p>\r\n<p>As a workaround, I replace the &quot;remove handler&quot; with &quot;replace handler&quot;:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Green\">//_propertyNameToHandlerMap.Remove(propertyName);</span>\r\n_propertyNameToHandlerMap[propertyName] = (a) =&gt; { };<span style=\"color:Green\">//replace with a dummy instead of removing.</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>So, RecieveWeakEvent gets a hit on the map check; but the handler does nothing.&nbsp; Everything works like it should.&nbsp; When the tab is selected again, RegisterHandler replaces the dummy one with the real one.</p>\r\n<p>I want to know if there is something better I should be doing.</p>",
    "PostedDate": "2010-01-28T11:01:05.603-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "820805",
    "ThreadId": "82328",
    "Html": "<p>Hi Matt,</p>\r\n<p>Did you ever figure out what the problem was? I have the opposite problem: PropertyChangedEventManager.AddListener is not adding (though I've used it successfully before) and I'm wondering if my problem is related to yours.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks,</p>\r\n<p>&nbsp;&nbsp; Bob</p>",
    "PostedDate": "2012-04-06T05:52:22.843-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]